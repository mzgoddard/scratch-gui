{"version":3,"file":"player.js","sources":["webpack://GUI/./src/playground/player.jsx","webpack://GUI/./src/playground/player.css?89bb"],"sourcesContent":["import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\n\nimport Box from '../components/box/box.jsx';\nimport GUI from '../containers/gui.jsx';\nimport HashParserHOC from '../lib/hash-parser-hoc.jsx';\nimport AppStateHOC from '../lib/app-state-hoc.jsx';\nimport TitledHOC from '../lib/titled-hoc.jsx';\n\nimport {setPlayer} from '../reducers/mode';\n\nif (process.env.NODE_ENV === 'production' && typeof window === 'object') {\n    // Warn before navigating away\n    window.onbeforeunload = () => true;\n}\n\nimport styles from './player.css';\n\nconst Player = ({isPlayerOnly, onSeeInside, projectId}) => (\n    <Box className={classNames(isPlayerOnly ? styles.stageOnly : styles.editor)}>\n        {isPlayerOnly && <button onClick={onSeeInside}>{'See inside'}</button>}\n        <GUI\n            enableCommunity\n            isPlayerOnly={isPlayerOnly}\n            projectId={projectId}\n        />\n    </Box>\n);\n\nPlayer.propTypes = {\n    isPlayerOnly: PropTypes.bool,\n    onSeeInside: PropTypes.func,\n    projectId: PropTypes.string\n};\n\nconst mapStateToProps = state => ({\n    isPlayerOnly: state.scratchGui.mode.isPlayerOnly\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSeeInside: () => dispatch(setPlayer(false))\n});\n\nconst ConnectedPlayer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Player);\n\n// note that redux's 'compose' function is just being used as a general utility to make\n// the hierarchy of HOC constructor calls clearer here; it has nothing to do with redux's\n// ability to compose reducers.\nconst WrappedPlayer = compose(\n    AppStateHOC,\n    HashParserHOC,\n    TitledHOC\n)(ConnectedPlayer);\n\nconst appTarget = document.createElement('div');\ndocument.body.appendChild(appTarget);\n\nReactDOM.render(<WrappedPlayer isPlayerOnly />, appTarget);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stage-only\":\"player_stage-only_3WHZN\",\"stageOnly\":\"player_stage-only_3WHZN\",\"editor\":\"player_editor_wkTja\"};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAHA;AACA;AAUA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;AAMA;AACA;AACA;AAAA;AAMA;AACA;AAEA;AAAA;AAAA;;;;;;;AChEA;AACA;;;;A","sourceRoot":""}